name: CI Tests and Lint # <<< Use this name in settings.json

on:
  push:
    branches: ["main", "develop"] # Trigger on main and development branches
  pull_request:
    branches: ["main", "develop"] # Trigger on PRs targeting main/develop
  workflow_dispatch: # Allows manual triggering

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allow other Python versions to finish if one fails
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # Choose Python versions relevant to CrewAI/your dependencies

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip" # Cache pip dependencies for speed

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install essential tools
          pip install ruff pytest pytest-cov
          # Install project dependencies - CHOOSE AND ADAPT ONE METHOD:
          # A) Using requirements.txt (include dev requirements if you have requirements-dev.txt)
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else if [ -f requirements.txt ]; then pip install -r requirements.txt; fi; fi
          # B) Using pyproject.toml with Hatch/Setuptools (install project + dev dependencies)
          # pip install .[dev]
          # C) Using Poetry
          # pip install poetry && poetry install --no-interaction --with dev
          # D) Using PDM
          # pip install pdm && pdm install --dev

      - name: Lint with Ruff (Check + Format)
        run: |
          ruff check .
          ruff format --check .

      # --- Important Step for CrewAI Projects ---
      - name: Run tests with Pytest (using dummy API keys)
        env:
          # IMPORTANT: Provide DUMMY or TEST keys here ONLY if tests NEED them
          # NEVER commit real keys. Use GitHub Secrets for real deployments/integration tests (see below)
          OPENAI_API_KEY: "dummy_key_for_ci_tests_if_needed"
          SERPER_API_KEY: "dummy_key_for_ci_tests_if_needed"
          # Add other keys your tests might minimally require (ideally, mock them!)
        run: |
          # - Use pytest-cov to generate a coverage report
          # - Ideally, your unit tests should MOCK external API calls (like LLMs, search tools)
          #   so you don't rely on secrets or network calls in standard CI.
          pytest --cov=./ --cov-report=xml

    # Optional: Upload coverage report (useful for code quality platforms like Codecov)
    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # Requires setting up Codecov and adding a secret
    #     files: ./coverage.xml # Path to coverage file generated by pytest-cov
    #     fail_ci_if_error: true
